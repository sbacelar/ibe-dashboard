---
title: "IBE 2023"
format: 
  dashboard:
    logo: images/ibe-logo-svg.svg
---

```{r, load-packages}
#| label: load-packages
#| message: false

library(tidyverse)
library(DT)
library(plotly)
library(readr)
theme_set(theme_minimal(base_size = 24, base_family = "Atkinson Hyperlegible"))
```


```{r, load-data}
#| label: load-data
#| message: false

load("data/q1_3.RData")
load("data/q1_3_long.RData")
q1_3_long <- q1_3_long |> select(-c(Nome, Abreviatura))

figs_titles <- read_delim("data/figuras_destaque_titulos_2.csv", 
                          delim = ";", escape_double = FALSE, col_types = cols(fig = col_character()), 
                          trim_ws = TRUE)

calc_annual_mean_rates <- function(d) {
  df <- d
  
  ## Assuming your data is loaded in a dataframe called df
  
  # Convert the numeric columns (with commas as decimal points) to numeric values
  numeric_columns <- 9:ncol(df) # Assuming the first 6 columns are non-numeric
  df[, numeric_columns] <- lapply(df[, numeric_columns], function(x)
    as.numeric(gsub(",", ".", x)))
  
  # Define the first year
  first_year <- 2010
  
  # Function to find the last available year for each row
  get_last_year <- function(row) {
    years <- colnames(df)[numeric_columns]
    valid_years <- which(!is.na(row[years]))
    if (length(valid_years) > 0) {
      return(as.numeric(years[valid_years[length(valid_years)]])) # Return the last available year
    } else {
      return(NA) # Return NA if no valid years
    }
  }
  
  # Apply the function to get the last available year for each row
  df$last_year <- apply(df, 1, get_last_year)
  
  # Calculate the number of years for each row
  df$num_years <- as.numeric(df$last_year) - first_year
  
  # Compute the annual mean rate for each row, ensuring numeric conversion
  df$annual_mean_rate <- apply(df, 1, function(row) {
    # Extract the first and last values as numeric
    first_value <- as.numeric(row[paste0(first_year)])
    last_value <- as.numeric(row[paste0(row['last_year'])])
    num_years <- as.numeric(row['num_years'])
    
    # Check for non-NA values and compute the rate
    if (!is.na(first_value) &
        !is.na(last_value) & !is.na(num_years) & num_years > 0) {
      rate <- ((last_value / first_value) ^ (1 / num_years)) - 1
      return(round(rate * 100, 1)) # Multiply by 100 and round to 1 decimal place
    } else {
      return(NA)
    }
  })
  
  df_annual_rates <- df |>
    select(Indicador, Abreviatura, last_year, annual_mean_rate)
  return(df_annual_rates)
}

df_annual_rates <- calc_annual_mean_rates(q1_3)
```


```{r, prep-data}}
#| label: prep-data

df <- q1_3_long |>
  rename(
    year = Ano,
    value = Valor,
    variable_code = Indicador,
    variable_label = Abbreviation
  ) |>
  mutate(variable_label = paste(variable_code, variable_label, sep = ": "))
```

```{r, plot-functions}
#| label: all-values
#| results: hide

plot_variables <- function(data,
                           variables_to_plot,
                           line_thickness = NULL,
                           smooth = FALSE,
                           title = NULL,
                           year_column = "year",
                           variable_column = "variable_code",
                           label_column = "variable_label",
                           value_column = "value") {
  # Ensure year and value columns are numeric
  data <- data %>%
    mutate(year = as.numeric(!!sym(year_column)), value = as.numeric(!!sym(value_column)))
  
  # Filter data for the selected variables
  plot_data <- data %>%
    filter(!!sym(variable_column) %in% variables_to_plot)
  
  # Prepare an empty dataframe to store the results
  smoothed_data <- data.frame()
  
  # Process each variable separately
  for (var in variables_to_plot) {
    temp_data <- plot_data %>% filter(!!sym(variable_column) == var)
    
    if (smooth) {
      if (nrow(temp_data) > 1) {
        # Remove NA values before applying loess
        temp_data_non_na <- temp_data %>% drop_na(value)
        if (nrow(temp_data_non_na) > 1) {
          loess_fit <- stats::loess(value ~ year, data = temp_data_non_na, span = 0.5)
          temp_data <- temp_data %>%
            mutate(Smoothed_Value = predict(loess_fit, newdata = data.frame(year = temp_data$year)))
        } else {
          temp_data <- temp_data %>% mutate(Smoothed_Value = value)
        }
      } else {
        temp_data <- temp_data %>% mutate(Smoothed_Value = value)
      }
    } else {
      temp_data <- temp_data %>% mutate(Smoothed_Value = value)
    }
    
    smoothed_data <- rbind(smoothed_data, temp_data)
  }
  
  # Apply line thicknesses if provided
  if (is.null(line_thickness)) {
    line_thickness <- rep(2, length(variables_to_plot))  # Default to standard line thickness
  } else {
    line_thickness <- ifelse(line_thickness == 1, 4, 2)  # Convert thickness indicator (0 = standard, 1 = thick)
  }
  
  # Create a dataframe with variable names and corresponding line thicknesses
  thickness_df <- data.frame(variable = variables_to_plot, line_width = line_thickness)
  
  # Merge line thickness into smoothed_data
  smoothed_data <- smoothed_data %>%
    left_join(thickness_df, by = setNames("variable", variable_column))
  
  # Use the provided title or generate a default one
  plot_title <- if (!is.null(title)) {
    title
  } else {
    paste("Variables:",
          paste(variables_to_plot, collapse = ", "),
          if (smooth)
            "(Smoothed)"
          else
            "")
  }
  
  # Create the Plotly line plot for the selected variables
  p <- plot_ly()
  
  for (var in variables_to_plot) {
    var_data <- smoothed_data %>% filter(!!sym(variable_column) == var)
    
    # Split the data into segments at NA values
    split_indices <- c(0, which(is.na(var_data$Smoothed_Value)), nrow(var_data) + 1)
    segments <- lapply(1:(length(split_indices) - 1), function(i) {
      var_data[(split_indices[i] + 1):(split_indices[i + 1] - 1), ]
    })
    
    # Add each segment as a separate trace
    for (i in seq_along(segments)) {
      segment <- segments[[i]]
      if (nrow(segment) > 0) {
        p <- p %>% add_trace(
          data = segment,
          x = ~ get(year_column),
          y = ~ Smoothed_Value,
          #text = ~ get(variable_column),
          text = ~ get(label_column),
          hoverinfo = "text+y",
          name = ~ get(label_column)[1],
          type = 'scatter',
          mode = 'lines',
          line = list(width = segment$line_width[1]),
          showlegend = (i == 1)  # Only show legend for the first segment
        )
      }
    }
  }
  
  p <- p %>% layout(
    #title = plot_title,
    xaxis = list(title = "Year"),
    yaxis = list(title = "No.")
  )
  
  return(p)
}


# one_function ------------------------------------------------------------

plot_for_group <- function(data, group_column, group_value) {
  # , title_raw = "Custom Title: Raw Data", title_smoothed = "Custom Title: Smoothed Data"
  # Function to get vars_plot based on group_value
  get_vars_plot <- function(data, group_column, group_value) {
    group_column_sym <- sym(group_column)  # Convert string column name to symbol
    
    if (group_value != 'IBE') {
      unique_vars <- data %>%
        filter(!!group_column_sym == group_value) %>%
        distinct(variable_code) %>%
        pull(variable_code)
      
      vars_plot <- c(unique_vars, group_value)
    } else {
      vars_plot <- c("P1", "P2", "IBE")
    }
    
    return(vars_plot)
  }
  
  # Generate vars_plot and line_thick
  vars_plot <- get_vars_plot(data, group_column, group_value)
  line_thick <- c(rep("0", length(vars_plot) - 1), "1")
  
  # Create raw data plot
  plot_raw <- plot_variables(
    data,
    variables_to_plot = vars_plot,
    line_thickness = line_thick,
    smooth = FALSE
    #title = title_raw
  )
  
  # Create smoothed data plot
  plot_smoothed <- plot_variables(
    data,
    variables_to_plot = vars_plot,
    line_thickness = line_thick,
    smooth = TRUE
    #title = title_smoothed
  )
  
  # Return the plots as a list
  return(list(plot_raw = plot_raw, plot_smoothed = plot_smoothed))
}
```


```{r, rates}
#| label: rates
#| results: hide

IBE_rate <- df_annual_rates %>%
  filter(Indicador == 'IBE') %>%
  pull(annual_mean_rate)

CMV_rate <- df_annual_rates %>%
  filter(Indicador == 'P1') %>%
  pull(annual_mean_rate)

QV_rate <- df_annual_rates %>%
  filter(Indicador == 'P2') %>%
  pull(annual_mean_rate)

I05_rate <- df_annual_rates %>%
  filter(Indicador == 'i05') %>%
  pull(annual_mean_rate)

I10_rate <- df_annual_rates %>%
  filter(Indicador == 'i10') %>%
  pull(annual_mean_rate)

I19_rate <- df_annual_rates %>%
  filter(Indicador == 'i19') %>%
  pull(annual_mean_rate)

I30_rate <- df_annual_rates %>%
  filter(Indicador == 'i30') %>%
  pull(annual_mean_rate)

I46_rate <- df_annual_rates %>%
  filter(Indicador == 'i46') %>%
  pull(annual_mean_rate)

I58_rate <- df_annual_rates %>%
  filter(Indicador == 'i58') %>%
  pull(annual_mean_rate)


value_box_color <- function(rate) {
  case_when(
    between(rate, -4, 4) ~ "warning",
    rate < -4  ~ "danger",
    .default = "success"
  )
}



IBE_rate_color <- value_box_color(IBE_rate)
CMV_rate_color <- value_box_color(CMV_rate)
QV_rate_color <- value_box_color(QV_rate)
I05_rate_color <- value_box_color(I05_rate)
I10_rate_color <- value_box_color(I10_rate)
I19_rate_color <- value_box_color(I19_rate)
I30_rate_color <- value_box_color(I30_rate)
I46_rate_color <- value_box_color(I46_rate)
I58_rate_color <- value_box_color(I58_rate)

```

#  {.sidebar}

[Versão em Português](dashboard.html)

::: {.callout-note collapse="true"}
### Notes

1. the boxes with values show the average annual rate of change between 2010 and 
the latest available year (2021 or 2022) for the main indicators;
2. the rates of change were calculated using the following formula: $$\left(\frac{X_{\text{final}}}{X_{\text{2010}}} \right)^{\frac{1}{n}} - 1$$
where $X_{\text{final}}$ is the most recent value, $X_{\text{2010}}$ is the value 
of the indicator in 2010 and $n$ is the number of years between the two values;
3. The colour of the boxes depends on the value of the average annual rate of change:
    - green: average annual rate of change greater than 4%;
    - yellow: average annual rate of change between -4% and 4%;
    - red: average annual rate of change of less than -4%.
:::

# Global

## Row

```{r, valuebox_IBE}
#| content: valuebox
#| title: "WBI (2010-2022)"

list(
  icon = "emoji-smile",
  color = IBE_rate_color,
  value = paste0(IBE_rate, "%")
)
```

```{r, valuebox_CMV}
#| content: valuebox
#| title: "Material living conditions (2010-2022)"

list(
  icon = "currency-euro",
  color = CMV_rate_color,
  value = paste0(CMV_rate, "%")
)
```

```{r, valuebox_QV}
#| content: valuebox
#| title: "Quality of life (2010-2022)"

list(
  icon = "alt",
  color = QV_rate_color,
  value = paste0(QV_rate, "%")
)
```

## Row {.tabset}


```{r, plot_IBE}
#| title: "Well-being index (WBI): global and by perspective"

plots <- plot_for_group(df, group_column = "parent", group_value = "IBE")

# Display the plots
plots$plot_raw
```

```{r, plot_CMV}}
#| title: "Material Living Conditions and its domains"

#|
plots <- plot_for_group(df, group_column = "parent", group_value = "P1")

# Display the plots
plots$plot_raw
```

```{r, plot_QV}}
#| title: "Quality of Life and its domains"

#|
plots <- plot_for_group(df, group_column = "parent", group_value = "P2")

# Display the plots
plots$plot_raw
```

# Material living conditions

## Row


```{r, valuebox_I05}
#| content: valuebox
#| title: "Individual consumption expenditure by households (2010-2022)"

list(
  icon = "piggy-bank",
  color = I05_rate_color,
  value = paste0(I05_rate, "%")
)
```

```{r, valuebox_I10}
#| content: valuebox
#| title: "People at risk of poverty (2010-2021)"

list(
  icon = "align-bottom",
  color = I10_rate_color,
  value = paste0(I10_rate, "%")
)
```

```{r, valuebox_I19}
#| content: valuebox
#| title: "Unemployment rate (2010-2022)"

list(
  icon = "activity",
  color = I19_rate_color,
  value = paste0(I19_rate, "%")
)
```


## Row {.tabset}


```{r, plot_D01}}
#| title: "Economic well-being"


plots <- plot_for_group(df, group_column = "parent", group_value = "D01")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```


```{r, plot_D02}
#| title: "Economic vulnerability"

plots <- plot_for_group(df, group_column = "parent", group_value = "D02")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```

```{r, plot_D03}
#| title: "Employment"

plots <- plot_for_group(df, group_column = "parent", group_value = "D03")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```

# Quality of life

## Row

```{r, valuebox_I30}
#| content: valuebox
#| title: "Life expectancy at birth (2010-2022)"

list(
  icon = "arrow-up-right",
  color = I30_rate_color,
  value = paste0(I30_rate, "%")
)
```

```{r, valuebox_I46}
#| content: valuebox
#| title: "Tertiary educational attainment (2010-2022)"

list(
  icon = "backpack",
  color = I46_rate_color,
  value = paste0(I46_rate, "%")
)
```

```{r, valuebox_I58}
#| content: valuebox
#| title: "Overall life satisfaction (2010-2021)"

list(
  icon = "emoji-smile-fill",
  color = I58_rate_color,
  value = paste0(I58_rate, "%")
)
```


## Row {.tabset}


```{r, plot_D04}
#| title: "Health"


plots <- plot_for_group(df, group_column = "parent", group_value = "D04")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```


```{r, plot_D05}}
#| title: "Work-life balance"

plots <- plot_for_group(df, group_column = "parent", group_value = "D05")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```

```{r, plot_D06}
#| title: "Education, knowledge and skills"

plots <- plot_for_group(df, group_column = "parent", group_value = "D06")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```


```{r, plot_D07}}
#| title: "Social relations and subjective well-being"


plots <- plot_for_group(df, group_column = "parent", group_value = "D07")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```


```{r, plot_D08}
#| title: "Civic participation and governance"

plots <- plot_for_group(df, group_column = "parent", group_value = "D08")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```

```{r, plot_D09}
#| title: "Personal security"

plots <- plot_for_group(df, group_column = "parent", group_value = "D09")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```

```{r}
#| title: "Environment"

plots <- plot_for_group(df, group_column = "parent", group_value = "D10")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```

# Data

```{r, Dados}
#| title: "Data"

df <- q1_3 |>
  select(-ord, -Nome, -Abreviatura, -Abbreviation) |>
  rename("Indicator" = "Indicador")

datatable(df)

```