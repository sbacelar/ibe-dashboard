---
title: "IBE 2023"
format: 
  dashboard:
    logo: images/ibe.png
# theme: [cosmo, custom.scss]
# fig-width: 10
# fig-asp: 0.3
# params:
#   month: "September"
#   year: "2023"
# editor_options: 
#   chunk_output_type: console
---

```{r}
#| label: load-packages
#| message: false

library(tidyverse)
library(DT)
library(plotly)
library(readr)
theme_set(theme_minimal(base_size = 24, base_family = "Atkinson Hyperlegible"))
```


```{r}
#| label: load-data
#| message: false

load("data/q1_3.RData")
load("data/q1_3_long.RData")
figs_titles <- read_delim("data/figuras_destaque_titulos_2.csv", 
                          delim = ";", escape_double = FALSE, col_types = cols(fig = col_character()), 
                          trim_ws = TRUE)

calc_annual_mean_rates <- function(d) {
  df <- d
  
  ## Assuming your data is loaded in a dataframe called df
  
  # Convert the numeric columns (with commas as decimal points) to numeric values
  numeric_columns <- 7:ncol(df) # Assuming the first 6 columns are non-numeric
  df[, numeric_columns] <- lapply(df[, numeric_columns], function(x)
    as.numeric(gsub(",", ".", x)))
  
  # Define the first year
  first_year <- 2010
  
  # Function to find the last available year for each row
  get_last_year <- function(row) {
    years <- colnames(df)[numeric_columns]
    valid_years <- which(!is.na(row[years]))
    if (length(valid_years) > 0) {
      return(as.numeric(years[valid_years[length(valid_years)]])) # Return the last available year
    } else {
      return(NA) # Return NA if no valid years
    }
  }
  
  # Apply the function to get the last available year for each row
  df$last_year <- apply(df, 1, get_last_year)
  
  # Calculate the number of years for each row
  df$num_years <- as.numeric(df$last_year) - first_year
  
  # Compute the annual mean rate for each row, ensuring numeric conversion
  df$annual_mean_rate <- apply(df, 1, function(row) {
    # Extract the first and last values as numeric
    first_value <- as.numeric(row[paste0(first_year)])
    last_value <- as.numeric(row[paste0(row['last_year'])])
    num_years <- as.numeric(row['num_years'])
    
    # Check for non-NA values and compute the rate
    if (!is.na(first_value) &
        !is.na(last_value) & !is.na(num_years) & num_years > 0) {
      rate <- ((last_value / first_value) ^ (1 / num_years)) - 1
      return(round(rate * 100, 1)) # Multiply by 100 and round to 1 decimal place
    } else {
      return(NA)
    }
  })
  
  df_annual_rates <- df |>
    select(Indicador, Abreviatura, last_year, annual_mean_rate)
  return(df_annual_rates)
}

df_annual_rates <- calc_annual_mean_rates(q1_3)
```


```{r}
#| label: prep-data

df <- q1_3_long |>
  rename(
    year = Ano,
    value = Valor,
    variable_code = Indicador,
    variable_label = Abreviatura
  ) |>
  mutate(variable_label = paste(variable_code, variable_label, sep = ": "))
```

#  {.sidebar}

<!-- [English version](dashboard_ibe_en.html) -->


# Global

```{r}
#| label: all-values
#| results: hide

plot_variables <- function(data,
                           variables_to_plot,
                           line_thickness = NULL,
                           smooth = FALSE,
                           title = NULL,
                           year_column = "year",
                           variable_column = "variable_code",
                           label_column = "variable_label",
                           value_column = "value") {
  # Ensure year and value columns are numeric
  data <- data %>%
    mutate(year = as.numeric(!!sym(year_column)), value = as.numeric(!!sym(value_column)))
  
  # Filter data for the selected variables
  plot_data <- data %>%
    filter(!!sym(variable_column) %in% variables_to_plot)
  
  # Prepare an empty dataframe to store the results
  smoothed_data <- data.frame()
  
  # Process each variable separately
  for (var in variables_to_plot) {
    temp_data <- plot_data %>% filter(!!sym(variable_column) == var)
    
    if (smooth) {
      if (nrow(temp_data) > 1) {
        # Remove NA values before applying loess
        temp_data_non_na <- temp_data %>% drop_na(value)
        if (nrow(temp_data_non_na) > 1) {
          loess_fit <- stats::loess(value ~ year, data = temp_data_non_na, span = 0.5)
          temp_data <- temp_data %>%
            mutate(Smoothed_Value = predict(loess_fit, newdata = data.frame(year = temp_data$year)))
        } else {
          temp_data <- temp_data %>% mutate(Smoothed_Value = value)
        }
      } else {
        temp_data <- temp_data %>% mutate(Smoothed_Value = value)
      }
    } else {
      temp_data <- temp_data %>% mutate(Smoothed_Value = value)
    }
    
    smoothed_data <- rbind(smoothed_data, temp_data)
  }
  
  # Apply line thicknesses if provided
  if (is.null(line_thickness)) {
    line_thickness <- rep(2, length(variables_to_plot))  # Default to standard line thickness
  } else {
    line_thickness <- ifelse(line_thickness == 1, 4, 2)  # Convert thickness indicator (0 = standard, 1 = thick)
  }
  
  # Create a dataframe with variable names and corresponding line thicknesses
  thickness_df <- data.frame(variable = variables_to_plot, line_width = line_thickness)
  
  # Merge line thickness into smoothed_data
  smoothed_data <- smoothed_data %>%
    left_join(thickness_df, by = setNames("variable", variable_column))
  
  # Use the provided title or generate a default one
  plot_title <- if (!is.null(title)) {
    title
  } else {
    paste("Variables:",
          paste(variables_to_plot, collapse = ", "),
          if (smooth)
            "(Smoothed)"
          else
            "")
  }
  
  # Create the Plotly line plot for the selected variables
  p <- plot_ly()
  
  for (var in variables_to_plot) {
    var_data <- smoothed_data %>% filter(!!sym(variable_column) == var)
    
    # Split the data into segments at NA values
    split_indices <- c(0, which(is.na(var_data$Smoothed_Value)), nrow(var_data) + 1)
    segments <- lapply(1:(length(split_indices) - 1), function(i) {
      var_data[(split_indices[i] + 1):(split_indices[i + 1] - 1), ]
    })
    
    # Add each segment as a separate trace
    for (i in seq_along(segments)) {
      segment <- segments[[i]]
      if (nrow(segment) > 0) {
        p <- p %>% add_trace(
          data = segment,
          x = ~ get(year_column),
          y = ~ Smoothed_Value,
          #text = ~ get(variable_column),
          text = ~ get(label_column),
          hoverinfo = "text+y",
          name = ~ get(label_column)[1],
          type = 'scatter',
          mode = 'lines',
          line = list(width = segment$line_width[1]),
          showlegend = (i == 1)  # Only show legend for the first segment
        )
      }
    }
  }
  
  p <- p %>% layout(
    #title = plot_title,
    xaxis = list(title = "Ano"),
    yaxis = list(title = "No.")
  )
  
  return(p)
}


# one_function ------------------------------------------------------------

plot_for_group <- function(data, group_column, group_value) {
  # , title_raw = "Custom Title: Raw Data", title_smoothed = "Custom Title: Smoothed Data"
  # Function to get vars_plot based on group_value
  get_vars_plot <- function(data, group_column, group_value) {
    group_column_sym <- sym(group_column)  # Convert string column name to symbol
    
    if (group_value != 'IBE') {
      unique_vars <- data %>%
        filter(!!group_column_sym == group_value) %>%
        distinct(variable_code) %>%
        pull(variable_code)
      
      vars_plot <- c(unique_vars, group_value)
    } else {
      vars_plot <- c("P1", "P2", "IBE")
    }
    
    return(vars_plot)
  }
  
  # Generate vars_plot and line_thick
  vars_plot <- get_vars_plot(data, group_column, group_value)
  line_thick <- c(rep("0", length(vars_plot) - 1), "1")
  
  # Create raw data plot
  plot_raw <- plot_variables(
    data,
    variables_to_plot = vars_plot,
    line_thickness = line_thick,
    smooth = FALSE
    #title = title_raw
  )
  
  # Create smoothed data plot
  plot_smoothed <- plot_variables(
    data,
    variables_to_plot = vars_plot,
    line_thickness = line_thick,
    smooth = TRUE
    #title = title_smoothed
  )
  
  # Return the plots as a list
  return(list(plot_raw = plot_raw, plot_smoothed = plot_smoothed))
}
```


```{r}
#| label: rates
#| results: hide

IBE_rate <- df_annual_rates %>%
  filter(Indicador == 'IBE') %>%
  pull(annual_mean_rate)

CMV_rate <- df_annual_rates %>%
  filter(Indicador == 'P1') %>%
  pull(annual_mean_rate)

# p_cesarean_color <- case_when(
#   between(p_cesarean, params$us_cesarean_rate, params$us_cesarean_rate + params$threshold_diff) ~ "warning",
#   p_cesarean > params$us_cesarean_rate + params$threshold_diff ~ "danger",
#   .default = "light"
#   )

QV_rate <- df_annual_rates %>%
  filter(Indicador == 'P2') %>%
  pull(annual_mean_rate)

# p_preterm_color <- case_when(
#   between(p_preterm, params$us_preterm_rate, params$us_preterm_rate + params$threshold_diff) ~ "warning",
#   p_preterm > params$us_preterm_rate + params$threshold_diff ~ "danger",
#   .default = "light"
#   )
```



## Taxas de variação média anual (2010 - último ano disponível) {height="20%"}

```{r}
#| content: valuebox
#| title: "IBE"

list(
  icon = "file-medical",
  color = "primary",
  value = paste0(IBE_rate, "%")
)
```

```{r}
#| content: valuebox
#| title: "Condições materiais de vida"

list(
  icon = "file-medical",
  color = "warning",
  value = paste0(CMV_rate, "%")
)
```

```{r}
#| content: valuebox
#| title: "Qualidade de vida"

list(
  icon = "calendar-week",
  color = "danger",
  value = paste0(QV_rate, "%")
)
```

## Row {height="80%" .tabset}


```{r}
#| title: Índice de Bem-estar - global e por perspetiva

plots <- plot_for_group(df, group_column = "parent", group_value = "IBE")

# Display the plots
plots$plot_raw
```

```{r}
#| title: Condições materiais de vida e respetivos domínios

#|
plots <- plot_for_group(df, group_column = "parent", group_value = "P1")

# Display the plots
plots$plot_raw
```

```{r}
#| title: Qualidade de vida e respetivos domínios

#|
plots <- plot_for_group(df, group_column = "parent", group_value = "P2")

# Display the plots
plots$plot_raw
```

# Condições materiais de vida

## Row {height="10%"}

Valueboxes 2

## Row {height="90%" .tabset}


```{r}
#| title: Bem-estar económico


plots <- plot_for_group(df, group_column = "parent", group_value = "D01")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```


```{r}
#| title: Vulnerabilidade económica

plots <- plot_for_group(df, group_column = "parent", group_value = "D02")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```

```{r}
#| title: Emprego

plots <- plot_for_group(df, group_column = "parent", group_value = "D03")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```

# Qualidade de vida

## Row {height="10%"}

Valueboxes 3

## Row {height="90%" .tabset}


```{r}
#| title: Saúde


plots <- plot_for_group(df, group_column = "parent", group_value = "D04")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```


```{r}
#| title: Balanço vida-trabalho

plots <- plot_for_group(df, group_column = "parent", group_value = "D05")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```

```{r}
#| title: Educação, conhecimento e competências

plots <- plot_for_group(df, group_column = "parent", group_value = "D06")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```


```{r}
#| title: Relações sociais e bem-estar subjetivo


plots <- plot_for_group(df, group_column = "parent", group_value = "D07")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```


```{r}
#| title: Participação cívica e governação

plots <- plot_for_group(df, group_column = "parent", group_value = "D08")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```

```{r}
#| title: Segurança pessoal

plots <- plot_for_group(df, group_column = "parent", group_value = "D09")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```

```{r}
#| title: Ambiente

plots <- plot_for_group(df, group_column = "parent", group_value = "D10")

# Display the plots
plots$plot_raw
#plots$plot_smoothed
```

# Dados

```{r}
#| title: Dados

df <- q1_3 |>
  select(-ord, -Abreviatura)

datatable(df)

```